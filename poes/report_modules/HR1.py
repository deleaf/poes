# reporting module for human-readable output - produces the 
# human-readable score report output from 1.x.x versions of POES
# (-p option in previous version)

import os
from poes_heirarchy import *
from poes_wordlist import Wordlist

def outputScoreTable(outFile, scoreTab, methOrder, indentLvl):
    """
    Writes scoreTab as a table to output file outFile
    """
    outFile.write(" "*indentLvl + "Scores:\n")
    for mname in methOrder:
        outFile.write(" "*indentLvl + "  " + mname + ":\t" + str(scoreTab[mname]) + "\n")
    
def outputKeyCounts(outFile, keyCounts, wordlist, indentLvl):
    """
    Writes keyCounts with values from wordlist as a table to output file outFile
    """
    maxKeyLen = max(map(lambda key: sum(map(len, key)) + len(key) - 1, wordlist.getKeys()))
    outFile.write(" "*indentLvl + "Wordlist key" + " "*(maxKeyLen-10) + "    value   num. occurences\n")
    for key in keyCounts:
        outFile.write(" "*indentLvl + " ")
        spaceUsed = -1
        for w in key:
            outFile.write(" " + w)
            spaceUsed += len(w) + 1
        keyVal = str(wordlist.getValue(key))
        keyCt = str(keyCounts[key]) 
        outFile.write(" "*(maxKeyLen-spaceUsed+4) + " "*max(5 - len(keyVal), 0) + keyVal + " "*3 + " "*max(15-len(keyCt), 0) + keyCt + "\n")


def report(batch, wordlist, outDir, outPrefix, configInfo, runid):
    fileLoc = os.path.join(outDir, outPrefix + "_" + runid + ".txt")
    sf = open(fileLoc,"w")
    try:
        sf.write("Generated by POES Version " + configInfo["POES_VER"].strip() + "\n\n")
        sf.write("APA style reference for POES:\n" + configInfo["POES_REF"] + "\n\n")
        sf.write("Wordlist Information:\n" + configInfo["WL_INFO"] + "\n\n")
        sf.write("APA style reference for Wordlist:\n" + configInfo["WL_REF"] + "\n\n")
        sf.write("Subject response data file name:\n" + configInfo["SUBJFILELOC"] + "\n\n")
        sf.write("Number of subjects: " + configInfo["NSUBJ"] + "\n\n")
        sf.write("Max. number of items: " + configInfo["MAXNITEMS"] + "\n\n")
        sf.write("Max. number of subparts: " + configInfo["MAXNSUBP"] + "\n\n")

        subjects = batch.getSubScorables()
        for subjID in batch.getSubIDOrder():
            sf.write("Subject " + str(subjID) + ' ' + '-'*56 + "\n")
            items = subjects[subjID].getSubScorables()
            for itemID in subjects[subjID].getSubIDOrder():
                sf.write("Item " + str(itemID) + "\n")
                subparts = items[itemID].getSubScorables()
                for subpID in items[itemID].getSubIDOrder():
                    sf.write("  SUBPART " + str(subpID) + "\n")
                    respData = subparts[subpID].getData()
                    lineSpace = 55
                    sf.write("   ")
                    for w in respData:
                        if lineSpace - len(w) - 1 >= 0:
                            sf.write(" " + w) 
                            lineSpace -= len(w) + 1
                        elif  lineSpace == 55 and len(w) > lineSpace:
                            sf.write(w + "\n") 
                        else:
                            sf.write("\n    " + w)
                            lineSpace = 55 - len(w)
                    sf.write("\n")
              
                    outputKeyCounts(sf, subparts[subpID].getKeyCounts(), wordlist, 2)
                    outputScoreTable(sf, subparts[subpID].getScoreTable(), subparts[subpID].getScoreMethOrder(), 2)
                    sf.write("\n")
    
                sf.write("  ITEM SCORES:\n")
                outputKeyCounts(sf, items[itemID].getKeyCounts(), wordlist, 2)
                outputScoreTable(sf, items[itemID].getScoreTable(), items[itemID].getScoreMethOrder(), 2)
                sf.write("\n")

            sf.write("All unique wordlist keys for subject " + subjID + " (across all items):\n")
            outputKeyCounts(sf, subjects[subjID].getKeyCounts(), wordlist, 0)
            sf.write("\n")
        
            sf.write("Scores for subject " + subjID + ":\n")

            subjScores = subjects[subjID].getScoreTable()
            outputScoreTable(sf, subjects[subjID].getScoreTable(), subjects[subjID].getScoreMethOrder(), 0)
            sf.write("\n")

    except IOError:
        print "Error: Could not open " + fileLoc + " for score report output"
    finally: 
        sf.close()
